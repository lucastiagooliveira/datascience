{
  
    
        "post0": {
            "title": "Pytorch Basics - Regressão Linear",
            "content": "O objetivo desse breve trabalho é apresentar como é realizado um modelo de regressão linear utilizando pytorch. Muitas das vezes utiliza-se regressão linear como uma primeira hipotese, devido a sua simplicidade, antes de partir para modelos mais complexos. . Carregando as bibliotecas necess&#225;rias . #Carregando o Pytorch import torch import pandas as pd import seaborn as sns import matplotlib.pyplot as plt import numpy as np . Carregando o conjunto de dados . Para carregar o bando de dados que está em .csv, utilizamos o pandas, o qual consegue ler um arquivo localmente ou em um nuvem (url deve ser do raw do .csv) . df = pd.read_csv(&#39;https://raw.githubusercontent.com/lucastiagooliveira/lucas_repo/master/Kaggle/Revisiting%20a%20Concrete%20Strength%20regression/datasets_31874_41246_Concrete_Data_Yeh.csv&#39;) . Mostrando as 5 primeiras linhas do dataframe carregado, isso é importante para verificarmos o se o dataframe está correto. . df.head() . cement slag flyash water superplasticizer coarseaggregate fineaggregate age csMPa . 0 540.0 | 0.0 | 0.0 | 162.0 | 2.5 | 1040.0 | 676.0 | 28 | 79.99 | . 1 540.0 | 0.0 | 0.0 | 162.0 | 2.5 | 1055.0 | 676.0 | 28 | 61.89 | . 2 332.5 | 142.5 | 0.0 | 228.0 | 0.0 | 932.0 | 594.0 | 270 | 40.27 | . 3 332.5 | 142.5 | 0.0 | 228.0 | 0.0 | 932.0 | 594.0 | 365 | 41.05 | . 4 198.6 | 132.4 | 0.0 | 192.0 | 0.0 | 978.4 | 825.5 | 360 | 44.30 | . Apresentando um resumo estatístico dos dataframe por coluna, tais como: quantidade de dados, média, desvio padrão, mínimo, primeiro ao terceiro quartil e valor máximo. . df.describe() . cement slag flyash water superplasticizer coarseaggregate fineaggregate age csMPa . count 1030.000000 | 1030.000000 | 1030.000000 | 1030.000000 | 1030.000000 | 1030.000000 | 1030.000000 | 1030.000000 | 1030.000000 | . mean 281.167864 | 73.895825 | 54.188350 | 181.567282 | 6.204660 | 972.918932 | 773.580485 | 45.662136 | 35.817961 | . std 104.506364 | 86.279342 | 63.997004 | 21.354219 | 5.973841 | 77.753954 | 80.175980 | 63.169912 | 16.705742 | . min 102.000000 | 0.000000 | 0.000000 | 121.800000 | 0.000000 | 801.000000 | 594.000000 | 1.000000 | 2.330000 | . 25% 192.375000 | 0.000000 | 0.000000 | 164.900000 | 0.000000 | 932.000000 | 730.950000 | 7.000000 | 23.710000 | . 50% 272.900000 | 22.000000 | 0.000000 | 185.000000 | 6.400000 | 968.000000 | 779.500000 | 28.000000 | 34.445000 | . 75% 350.000000 | 142.950000 | 118.300000 | 192.000000 | 10.200000 | 1029.400000 | 824.000000 | 56.000000 | 46.135000 | . max 540.000000 | 359.400000 | 200.100000 | 247.000000 | 32.200000 | 1145.000000 | 992.600000 | 365.000000 | 82.600000 | . Plotando os gr&#225;ficos de todas as v&#225;riaveis . Para visualização da relação entre as váriaveis é interessante fazer a visualização gráfica da relação entre as variáveis. Para isso usamos a função PairGrid da biblioteca Seaborn aliado com um scatterplot da biblioteca MatplotLib. . sns.set(style=&quot;darkgrid&quot;) g = sns.PairGrid(df) g.map(plt.scatter) . &lt;seaborn.axisgrid.PairGrid at 0x185717d77f0&gt; . Correla&#231;&#227;o linear . Para entendimento da correlação linear das variáveis entre si, temos a função &quot;built-in&quot; do Pandas que nos retorna o coeficiente de correlação que tem por padrão o método Pearson. . df.corr() . cement slag flyash water superplasticizer coarseaggregate fineaggregate age csMPa . cement 1.000000 | -0.275216 | -0.397467 | -0.081587 | 0.092386 | -0.109349 | -0.222718 | 0.081946 | 0.497832 | . slag -0.275216 | 1.000000 | -0.323580 | 0.107252 | 0.043270 | -0.283999 | -0.281603 | -0.044246 | 0.134829 | . flyash -0.397467 | -0.323580 | 1.000000 | -0.256984 | 0.377503 | -0.009961 | 0.079108 | -0.154371 | -0.105755 | . water -0.081587 | 0.107252 | -0.256984 | 1.000000 | -0.657533 | -0.182294 | -0.450661 | 0.277618 | -0.289633 | . superplasticizer 0.092386 | 0.043270 | 0.377503 | -0.657533 | 1.000000 | -0.265999 | 0.222691 | -0.192700 | 0.366079 | . coarseaggregate -0.109349 | -0.283999 | -0.009961 | -0.182294 | -0.265999 | 1.000000 | -0.178481 | -0.003016 | -0.164935 | . fineaggregate -0.222718 | -0.281603 | 0.079108 | -0.450661 | 0.222691 | -0.178481 | 1.000000 | -0.156095 | -0.167241 | . age 0.081946 | -0.044246 | -0.154371 | 0.277618 | -0.192700 | -0.003016 | -0.156095 | 1.000000 | 0.328873 | . csMPa 0.497832 | 0.134829 | -0.105755 | -0.289633 | 0.366079 | -0.164935 | -0.167241 | 0.328873 | 1.000000 | . Escolhendo as variáveis que serão utilizadas para criação do modelo. . var_used = [&#39;cement&#39;, &#39;superplasticizer&#39;, &#39;age&#39;, &#39;water&#39;] train = df[var_used] target = df[&#39;csMPa&#39;] . Tabela com somente as variáveis que serão utilizadas. . train.head() . cement superplasticizer age water . 0 540.0 | 2.5 | 28 | 162.0 | . 1 540.0 | 2.5 | 28 | 162.0 | . 2 332.5 | 0.0 | 270 | 228.0 | . 3 332.5 | 0.0 | 365 | 228.0 | . 4 198.6 | 0.0 | 360 | 192.0 | . Para iniciarmos um modelo temos que fazer a transformação da base de dados que está com o tipo de DataFrame para tensor, que é utilizado pelo Pytorch. Todavia, uma das maneiras de fazer essa transformação é antes fazer a transformação da base de dados para um vetor do Numpy e depois transformar para um tensor do Pytorch. . Obs.: Foi criado o vetor de uns para ser adicionado ao tensor dos parâmetros, pois essa coluna deverá multiplicar a constante da expressão (b), conforme o exemplo abaixo. . Y = a*X + b . train = np.asarray(train) a = np.ones((train.shape[0],1)) train = torch.tensor(np.concatenate((train, a), axis=1)) target = torch.tensor(np.asarray(target)) train.shape . torch.Size([1030, 5]) . Criando o modelo . Para iniciarmos precisamos criar uma função a qual definirá a equação da regressão linear a qual utilizará a função matmul para realizar a multiplicação entre os dois tensores dos parâmetros e variáveis dependentes. . def model(x,params): return torch.matmul(x, params) . Função que calcula o erro quadrático médio (MSE). . Para saber mais sobre como é calculado acesso o link: https://pt.qwe.wiki/wiki/Mean_squared_error . def mse(pred, labels): return ((pred - labels)**2).mean() . Para iniciar o treino do modelo primeiramente temos que criar um tensor o qual receberá os valores dos parâmetros que serão atualizados a cada iteração, quedo assim precisamos utilizar o método requiresgrad assim será possível calcular o gradiente desse tensor quando necessário. . Observe que o tipo do objeto criado é torch.float64. . params = torch.randn(5,1, dtype=torch.float64).requires_grad_() params.dtype . torch.float64 . Primeiro passo: realizar as predições do modelo . pred = model(train, params) . Segundo passo: calcular como o nosso modelo performou, ou seja, calcular MSE para averiguação da performace do modelo. . Observe que o modelo vai apresentar um erro acentuado, pois os parâmetros ainda não foram treinados. . loss = mse(pred, target) loss . tensor(4826.8560, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;) . Terceiro passo: realizar o gradiente descente. . Conceito do algoritmo de gradiente descendente: http://cursos.leg.ufpr.br/ML4all/apoio/Gradiente.html . loss.backward() params.grad . tensor([[ 4674.1422], [ 169.6877], [-7388.6451], [ 3269.3217], [ 19.6690]], dtype=torch.float64) . Quarto passo: Atualização dos parâmetros, para isso utiliza-se o valor do gradiente por meio do algoritmo descendente e é escalado (multiplicado) pelo taxa de aprendizado (learning rate). . Após a realização da atulização dos parâmetros deve-se resetar o gradiente. . lr = 1e-5 params.data -= lr * params.grad.data params.grad = None . Primeira iteração realizada, pode-se observar o valor do erro do nosso modelo reduziu. A tendência é ocorrer uma diminuição até a cada iteração, até a estabilização do modelo. . pred = model(train, params) loss = mse(pred, target) loss . tensor(4242.2577, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;) . Foi criada uma função que realiza todos os passos acima realizados. . def step(train, target, params, lr = 1e-6): ## realizando as predições pred = model(train, params) ## caculando o erro loss = mse(pred, target) ## realizando o gradiente descendente loss.backward() ## atualizando os parâmtros params.data -= lr * params.grad.data ## reset do gradiente params.grad = None ## imprimindo na tela o erro print(&#39;Loss:&#39;,loss.item()) ## retornado as predições e os parâmetros atuzalizados na ultima iteração return pred, params . Criando um loop para realizar as itereções, é possível verificar a diminuição do erro a cada iteração, ou seja, se realizada mais iteração pode-se chegar a um resultado plausível (neste caso não cheramos a um, pois o modelo de regressão linear não é um modelo adequado para esses dados, somente como hipótese inicial). . for i in range(10): loss, params = step(train, target, params) . Loss: 4242.257680475658 Loss: 4147.213642508007 Loss: 4069.8103849910617 Loss: 4002.831926761954 Loss: 3942.1511473935216 Loss: 3885.405335131498 Loss: 3831.2396737957183 Loss: 3778.8751298582406 Loss: 3727.8616331660246 Loss: 3677.9370952686463 . Esté é o resultado dos parâmetros que serão utilizados para o modelo realizar futuras predições. . parameters = params parameters #parametros do modelo . tensor([[-0.0047], [-0.4354], [-0.9488], [ 0.4712], [ 0.3103]], dtype=torch.float64, requires_grad=True) .",
            "url": "https://lucastiagooliveira.github.io/datascience/2020/08/30/pytorch_regress%C3%A3o_linear.html",
            "relUrl": "/2020/08/30/pytorch_regress%C3%A3o_linear.html",
            "date": " • Aug 30, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Como utilizar um Jupiter Notebook no modo escuro?",
            "content": "Se você também gosta de codar utilizando Jupyter Notebooks e ainda usa o modo escuro em todas as janelas para não sentir cansaço visual depois de ficar olhando para tela o dia todo, já deve ter se peguntado como posso mudar o tema do jupyter notebook para o modo escuro? . Mas se você procurar em todas as configurações não vai encontrar nada que possa resolver esse problema nas configurações padrões. Para fazermos isso temos duas possibilidades (gosto mais da segunda opção), as quais demostrarei a seguir. . Utilizar o pacote jupyter-themes . Para instalar esse pacote basta digitar no prompt de comando para instalar esse pacote que foi criado por Kyle Dunovan: . #intalação jupyterthemes pip install jupyterthemes . Ou utilizando o anaconda para instalação: . #instalação jupyterthemes utilizando o anaconda: conda install jupyterthemes . Após a instalação para verificar os temas diponíveis basta digitar: . jt -l . Serão listados os temas que estão disponíveis para utilização (por exemplo): . onedork | grade3 | oceans16 | chesterish | monokai | solarizedl | solarizedd . Para escolher o tema a ser utilizado: . # seleção do tema jt -t &lt;nome do tema&gt; # para exemplificar jt -t chesterish . Então para voltar a utilizar o tema original, só utilizar o comando: . Obs.: Caso não funcione, tente abrir um novo jupyter notebook . #voltar o tema original jt -r . Para mais configurações e informações desse tema, acesso o repositório oficial: https://github.com/dunovank/jupyter-themes . Utilizar o JupyterLab . JupyterLab é a nova geração da interface web do Project Jupyter, este já vem instalado para quem utiliza os ultimos pacotes do anaconda (https://docs.anaconda.com/anaconda/packages/pkg-docs/). Para quem não utiliza essas versões podem fazer a instalação separada utilizando as instruções do site: https://jupyterlab.readthedocs.io/en/stable/getting_started/installation.html. . Para abrir o JupyterLab basta digitir no prompt de comando: . jupyter lab . Após executado vai ser aberto o JupyterLab no seu browser, irá abrir de forma similar a imagem abaixo: . . Então com o JupyterLab aberto basta ir em Settings -&gt; JupyterLab Theme -&gt; JupyterLab Dark. . . Boom! . O seu notebook estará em modo escuro, pronto para ser utilizado. .",
            "url": "https://lucastiagooliveira.github.io/datascience/2020/08/30/modo-escuro-jupyter-notebook.html",
            "relUrl": "/2020/08/30/modo-escuro-jupyter-notebook.html",
            "date": " • Aug 30, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lucastiagooliveira.github.io/datascience/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lucastiagooliveira.github.io/datascience/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". . Lucas Tiago é um cientista de dados em formação e em busca de novos desfios, com experiência em engenharia de manutenção hopitalar e qualidade da energia elétrica. . Lucas é um apaixonado por dados e principalmente nos resultados que eles podem trazer para o compreenção da realizade. Ele se considera uma pessoa que não se conforma com as explicações padrões, ou seja, sempre buscando utilizar os dados para decifrar o status-quo. Isto cresceu durante a sua formação em engenharia elétrica e mestrado na área de qualidade da energia elétrica, com esse background continua buscando conhecimento realizando diversos cursos na área de ciência de dados. . Lucas está a procura de recolocação no mercado na área de data science e áreas correlatas, pois é apaixonado por novos desafios. Caso tenha interesse em conversarmos, por gentileza entre em contato pelo email lucastiagooliveira@gmail.com. . cloudCurriculum .",
          "url": "https://lucastiagooliveira.github.io/datascience/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lucastiagooliveira.github.io/datascience/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}