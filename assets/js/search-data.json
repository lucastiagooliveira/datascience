{
  
    
        "post0": {
            "title": "Reconhecimento de números (MNIST) utilizando fastai",
            "content": "Esse tutorial tem como objetivo utilizar o framework de machine learning fastai, para realizar um dos desafios mais tradicionais de classificação de imagens. Este é um dos desafios iniciais para os apredizes de redes neurais artificiais no que tange processamento de imagens, a base de dados utilizada para projeto pode ser encontradas em dois links diferentes: . Kaggle: https://www.kaggle.com/c/digit-recognizer/data; | The MNIST database: http://yann.lecun.com/exdb/mnist/. | . Carregando os pacotes utilizados . from fastai.vision.all import * import numpy as np import pandas as pd . Durante esse projeto estara sendo utilizado a versão 2.0.8 do fastai. . fastai.__version__ . Defini&#231;&#227;o do caminho dos arquivos . Um ponto inicial para o projeto é a definicação de um objeto que contenha o caminho diretório das imagens, para isso será utilizada o método Path do fastai. Esse método não retornará somente uma string contendo o diretório, mas sim uma classe da biblioteca padrão do Python 3, o que torna mais fácil o acesso aos arquivos e diretórios. . path = Path(r&quot;/content/images&quot;) . Carregando as imagens para o modelo . Para carregar as imagens para o treinamento do modelo precisamos uma função a qual determina o tipo da base de dados e como ela está estruturada. Para isso, utiliza-se a função ImageDataLoaders. . dls = ImageDataLoaders.from_folder(path, train = &#39;train&#39;, valid = &#39;valid&#39;, shuffle_train = True, bs=16) . Defini&#231;&#227;o e treinamento do modelo . Para definição da rede neural convolucional (Convolutional Neural Network) é utilizada a função cnn_learner. . Os argumentos que serão passados para esta será: . dls dataloader definido anteriormente; | resnet34 - arquitetura da rede neural, que neste caso está pretreinada amplamente utilizada para esse fim. Para saber mais sobre a resnet34: https://www.kaggle.com/pytorch/resnet34; | error_rate - metrica utilizada para avaliação do modelo. | . Afim de agilizar o treinamento do modelo, será utilizado o método to_fp16 (half-precision floating point) que utilizada números menos precisos, onde é possível. . Após isso pode-se realizar o treinamento da rede neural, para isso está sendo utilizada o método fine_tune. Como estamos utilizando uma rede neural pre-treinada, iremos realizar 4 iterações randomicamente utilizando os parâmetros pre-treinados e depois &quot;descongela&quot; todos as camadas treina o modelo alterando todos os pesos. . from fastai.callback.fp16 import * learn = cnn_learner(dls, resnet34, metrics=error_rate).to_fp16() learn.fine_tune(12, freeze_epochs=4) . Downloading: &#34;https://download.pytorch.org/models/resnet34-333f7ec4.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet34-333f7ec4.pth . . epoch train_loss valid_loss error_rate time . 0 | 0.924272 | 0.584760 | 0.178796 | 03:10 | . 1 | 0.435553 | 0.265654 | 0.083622 | 03:07 | . 2 | 0.220256 | 0.117850 | 0.036629 | 03:06 | . 3 | 0.145699 | 0.071909 | 0.021520 | 03:07 | . epoch train_loss valid_loss error_rate time . 0 | 0.071176 | 0.027350 | 0.007510 | 03:36 | . 1 | 0.047109 | 0.023690 | 0.006851 | 03:36 | . 2 | 0.061107 | 0.022068 | 0.005578 | 03:40 | . 3 | 0.033989 | 0.016123 | 0.004743 | 03:37 | . 4 | 0.024662 | 0.011009 | 0.003470 | 03:37 | . 5 | 0.006776 | 0.007155 | 0.002108 | 03:36 | . 6 | 0.003653 | 0.005281 | 0.001537 | 03:38 | . 7 | 0.000893 | 0.003047 | 0.000922 | 03:38 | . 8 | 0.000837 | 0.002989 | 0.000571 | 03:39 | . 9 | 0.000062 | 0.001865 | 0.000571 | 03:37 | . 10 | 0.002896 | 0.002266 | 0.000659 | 03:37 | . 11 | 0.000056 | 0.001731 | 0.000527 | 03:43 | . Como pode-se observar no gráfico abaixo, o erro apresentado durante o trainamento decresceu até a marca de 5.27e-4 utilizando na base de dados de treinamento, o que para parece muito bom. . learn.recorder.plot_loss() . Salvando o modelo treinado . Para salvar o modelo pode-se utilizar o método export(), o qual irá salvar no diretório padrão o arquivo export.pkl. Para carregar o modelo basta utilizar a função load_learn(). . learn.export() . Fazendo as predi&#231;&#245;es . Para se realizar as predições, será utilizada o método predict() e o argumento é o arquivo de imagem em .jpg. . #hide_output pred = [] for i in range(len(test_images)): image_path = &quot;/content/images/test/&quot; + str(i) + &quot;.jpg&quot; pred.append(int(learn.predict(image_path)[0])) . Para salvar o arquivo em um formato .csv foi criado um dataframe do pacote pandas e feita as devidas transformações para ser enviado para o Kaggle. . prediction = {&#39;ImageId&#39;: list(range(1,28001)), &#39;Label&#39;: pred} df = pd.DataFrame(prediction) df.to_csv(&#39;predicitons.csv&#39;, index = False) . Este modelo acertou 99,421% das 28000 imagens de teste. . .",
            "url": "https://lucastiagooliveira.github.io/datascience/mnist/fastai/2020/09/05/fastai_MNIST.html",
            "relUrl": "/mnist/fastai/2020/09/05/fastai_MNIST.html",
            "date": " • Sep 5, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Transformando uma imagem em .CSV para .JPEG",
            "content": "Para utilizamos algumas dos frameworks de machine learning mais utilizandos atualmente, não podemos carregar estas imagens se os dados dos pixels dessas imagens estiverem em um arquivo tipo .csv. Para isso, é importante fazermos a conversão desse tipo de arquivo para uma extensão suportada. . Esse arquivo pode ser obtido diretamente no site do Kaggle: https://www.kaggle.com/c/digit-recognizer/data . #importando os pacotes necessários import pandas as pd import imageio import numpy as np from fastai.vision.all import * from IPython.display import Image . Carregando a base de dados . path = Path(r&quot;C: Users lucas Documents lucastiagooliveira Kaggle digit-recognizer fastai data&quot;) #definindo o caminho df_train = pd.read_csv(str(path) + &#39;/train.csv&#39;) #carregando o arquivo de treino df_test = pd.read_csv(str(path) + &#39;/test.csv&#39;) #carregando o arquivo de test . df_train.head() . label pixel0 pixel1 pixel2 pixel3 pixel4 pixel5 pixel6 pixel7 pixel8 ... pixel774 pixel775 pixel776 pixel777 pixel778 pixel779 pixel780 pixel781 pixel782 pixel783 . 0 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 2 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 3 4 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 4 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 5 rows × 785 columns . Tranforma&#231;&#227;o dos dados utilizando numpy . Antes de tudo deve-se realizar o mudança da base de dados para utilizando o numpy, pois cada imagem é um vetor linha, ou seja, criar uma matriz 28x28 (que é a quantidade de pixels da imagem). . def to_img_shape(data_X, data_y=[]): #função para transformação dos dados data_X = np.array(data_X, dtype = np.uint8).reshape(-1,28,28) data_X = np.stack((data_X,)*3, axis=-1) data_y = np.array(data_y, dtype = np.uint8) return data_X,data_y . Separando as variáveis dependentes das idenpendentes. . y, X = df_train.pop(&#39;label&#39;), df_train . Criando os dataset para validação futura do modelo. . from sklearn.model_selection import train_test_split train_X, val_X, train_y, val_y = train_test_split(X, y, test_size=0.2) . Aplicando a transformação nos dados de treino, validação e teste. . train_X,train_y = to_img_shape(train_X, train_y) val_X,val_y = to_img_shape(val_X,val_y) test_X, _ = to_img_shape(df_test) . Transformando em imagem . Utilizando a biblioteca imageio podemos criar os arquivos, para cada conjunto de dados será criado uma nova pasta. . def save_imgs(path:Path, data, labels): path.mkdir(parents=True, exist_ok=True) for label in np.unique(labels): (path/str(label)).mkdir(parents=True, exist_ok=True) for i in range(len(data)): if(len(labels) != 0): imageio.imsave(str(path/str(labels[i])/(str(i)+&#39;.jpeg&#39;)), data[i]) else: imageio.imsave(str(path/(str(i)+&#39;.jpg&#39;)), data[i]) save_imgs(Path(&#39;data/train&#39;),train_X,train_y) save_imgs(Path(&#39;data/valid&#39;),val_X,val_y) save_imgs(Path(&#39;data/test&#39;),test_X, []) . Exibindo alguns dados j&#225; transformados . Image(str(path) + r&quot; train 0 0.jpeg&quot;) . Image(str(path) + r&quot; valid 0 5.jpeg&quot;) . Este trabalho precisou ser realizado por conta que o fastai não tem suporte a carregamento de arquivos .csv para treinamento dos modelos. .",
            "url": "https://lucastiagooliveira.github.io/datascience/csv/imagem/2020/09/01/transform-csv-jpeg.html",
            "relUrl": "/csv/imagem/2020/09/01/transform-csv-jpeg.html",
            "date": " • Sep 1, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Utilizando .csv em banco de dados SQL Server",
            "content": "Para salvar um arquivo .csv utilizando python precisamos que na máquina local tenha instalado o gerenciador de banco de dados SQL Sever, caso não seja o caso faça o download da versão express (gratuita) no link: https://www.microsoft.com/pt-br/sql-server/sql-server-downloads. . Para utilizarmos python para acessar bancos de dados precisamos instalar o pyodbc, o qual possibilita a conexão com diversos tipos de banco de dados. Para instalar é só digitar no prompt de comando pip install pyodbc. Para maiores mais detalhes: https://pypi.org/project/pyodbc/. . Carregando os pacotes do python . #carregando os pacotes necessários import pyodbc import pandas as pd import csv . Fazendo conex&#227;o com o banco de dados . Antes de mais nada precisamos conectar com o banco de dados que está instalado, o qual necessita dos seguintes dados: . SERVER (nome do servidor); | DATABASE (nome do seu banco de dados); | USERNAME (nome de usuário do banco de dados); | PASSWORD (senha do banco de dados); | DRIVER (tipo do banco de dados). | . Para estabelecer uma conexão utiliza-se o método pyodbc.connect da seguinte forma: . pyodbc.connect(&#39;DRIVER=&#39;+driver+&#39;;SERVER=&#39;+server+&#39;;PORT=1433;DATABASE=&#39;+database+&#39;;UID=&#39;+username+&#39;;PWD=&#39;+ password) . Criando cursor . Para manipularmos os dados de um banco de dados utilizando uma API (Application Programming Interface), necessita-se de fazermos utilizando um cursor. Os cursores possibilitam é um objeto que aponta para uma determinada linha dentro de um conjunto, o este que irá realizar todas as operações no banco de dados. . Para declarar iniciar um cursor utiliza-se o método .cursor(). . Obs.: Nunca deve-mos deixar de fechar o cursor após o uso. . cur = conn.cursor() . Criando uma tabela no SQL Server . Com o cursor aberto, podemos utiliza-lo para realizarmos as consultas (queries) no banco de dados, da qual está excluindo a tabela no banco de dados com o nome Socioeconomic_chicago se ela existir. . Observe que podemos fazer todas as consultados nos banco de dados utilizando o método execute(), assim podemos escrever as strings que serão utilizada para esse fim. . cur.execute(&#39;DROP TABLE IF EXISTS Socioeconomic_chicago&#39;) . &lt;pyodbc.Cursor at 0x21c5a180918&gt; . Segue o link para download do arquivo .csv utilizado: . https://data.cityofchicago.org/Health-Human-Services/Census-Data-Selected-socioeconomic-indicators-in-C/kn9c-c2s2 . Como não haverá mais conflito com uma tabela igual, pode-se utilizar o comando CREATE TABLE para criar uma nova tabela. . cur.execute(&#39;&#39;&#39; CREATE TABLE Socioeconomic_chicago( Community_Area_Number INT PRIMARY KEY, COMMUNITY_AREA_NAME VARCHAR(50), PERCENT_OF_HOUSING_CROWDED FLOAT, PERCENT_HOUSEHOLDS_BELOW_POVERTY FLOAT, PERCENT_AGED_16_UNEMPLOYED FLOAT, PERCENT_AGED_25_WITHOUT_HIGH_SCHOOL_DIPLOMA FLOAT, PERCENT_AGED_UNDER_18_OR_OVER_64 FLOAT, PER_CAPITA_INCOME FLOAT, HARDSHIP_INDEX INT, ) &#39;&#39;&#39; ) . &lt;pyodbc.Cursor at 0x21c5a180918&gt; . Salvando os dados no banco de dados . Declarar o caminho onde está localizado o arquivo em .csv. . file = &quot;C:/caminho/arquivo.csv&quot; . Neste passo será executado um loop para percorrer todas as linhas do arquivo .csv e gravar no banco de dados utilizando a query INSERT INTO nome_tabela (coluna1, coluna2, coluna3, ...) VALUES (valor1, valor2, valor3, ...). . i = 0 with open(file) as csv_file: csv_reader = csv.reader(csv_file, delimiter = &#39;,&#39;) for row in csv_reader: if i == 0: pass else: try: col1 = int(row[0]) col2 = row[1] col3 = float(row[2]) col4 = float(row[3]) col5 = float(row[4]) col6 = float(row[5]) col7 = float(row[6]) col8 = float(row[7]) col9 = int(row[8]) except: print(&#39;Values is broken, impossible to save in database. Code=&#39;, i) cur.execute(&#39;&#39;&#39; INSERT INTO Socioeconomic_chicago (Community_Area_Number, COMMUNITY_AREA_NAME,PERCENT_OF_HOUSING_CROWDED,PERCENT_HOUSEHOLDS_BELOW_POVERTY, PERCENT_AGED_16_UNEMPLOYED, PERCENT_AGED_25_WITHOUT_HIGH_SCHOOL_DIPLOMA,PERCENT_AGED_UNDER_18_OR_OVER_64,PER_CAPITA_INCOME,HARDSHIP_INDEX) VALUES (?,?,?,?,?,?,?,?,?) &#39;&#39;&#39;,(col1, col2, col3, col4, col5, col6, col7, col8, col9)) i += 1 . Pronto tabela salva no bando de dados! . Verifica&#231;&#227;o todas as linhas foram salvas . Carregando todos os dados da tabela utilizando o pandas. . df = pd.read_sql_query(&#39;&#39;&#39;SELECT * FROM Socioeconomic_chicago&#39;&#39;&#39;, conn) . . Important: Feche a conexão com o banco de dados. . cur.close() . Imprimindo a tabela carregada no banco de dados. . df . Community_Area_Number COMMUNITY_AREA_NAME PERCENT_OF_HOUSING_CROWDED PERCENT_HOUSEHOLDS_BELOW_POVERTY PERCENT_AGED_16_UNEMPLOYED PERCENT_AGED_25_WITHOUT_HIGH_SCHOOL_DIPLOMA PERCENT_AGED_UNDER_18_OR_OVER_64 PER_CAPITA_INCOME HARDSHIP_INDEX . 0 1 | Rogers Park | 7.7 | 23.6 | 8.7 | 18.2 | 27.5 | 23939.0 | 39 | . 1 2 | West Ridge | 7.8 | 17.2 | 8.8 | 20.8 | 38.5 | 23040.0 | 46 | . 2 3 | Uptown | 3.8 | 24.0 | 8.9 | 11.8 | 22.2 | 35787.0 | 20 | . 3 4 | Lincoln Square | 3.4 | 10.9 | 8.2 | 13.4 | 25.5 | 37524.0 | 17 | . 4 5 | North Center | 0.3 | 7.5 | 5.2 | 4.5 | 26.2 | 57123.0 | 6 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 73 74 | Mount Greenwood | 1.0 | 3.4 | 8.7 | 4.3 | 36.8 | 34381.0 | 16 | . 74 75 | Morgan Park | 0.8 | 13.2 | 15.0 | 10.8 | 40.3 | 27149.0 | 30 | . 75 76 | O&#39;Hare | 3.6 | 15.4 | 7.1 | 10.9 | 30.3 | 25828.0 | 24 | . 76 77 | Edgewater | 4.1 | 18.2 | 9.2 | 9.7 | 23.8 | 33385.0 | 19 | . 77 78 | CHICAGO | 4.7 | 19.7 | 12.9 | 19.5 | 33.5 | 28202.0 | 66 | . 78 rows × 9 columns . Essa foi uma forma simples que encontrei para fazer essa tarefa, pois existem outras formas igualmente eficazes. . Powered by: Lucas Tiago .",
            "url": "https://lucastiagooliveira.github.io/datascience/csv/image/2020/09/01/csv-to-sqlserver.html",
            "relUrl": "/csv/image/2020/09/01/csv-to-sqlserver.html",
            "date": " • Sep 1, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Pytorch Basics - Regressão Linear",
            "content": "O objetivo desse breve trabalho é apresentar como é realizado um modelo de regressão linear utilizando pytorch. Muitas das vezes utiliza-se regressão linear como uma primeira hipotese, devido a sua simplicidade, antes de partir para modelos mais complexos. . Carregando as bibliotecas necess&#225;rias . #Carregando o Pytorch import torch import pandas as pd import seaborn as sns import matplotlib.pyplot as plt import numpy as np . Carregando o conjunto de dados . Para carregar o bando de dados que está em .csv, utilizamos o pandas, o qual consegue ler um arquivo localmente ou em um nuvem (url deve ser do raw do .csv) . df = pd.read_csv(&#39;https://raw.githubusercontent.com/lucastiagooliveira/lucas_repo/master/Kaggle/Revisiting%20a%20Concrete%20Strength%20regression/datasets_31874_41246_Concrete_Data_Yeh.csv&#39;) . Mostrando as 5 primeiras linhas do dataframe carregado, isso é importante para verificarmos o se o dataframe está correto. . df.head() . cement slag flyash water superplasticizer coarseaggregate fineaggregate age csMPa . 0 540.0 | 0.0 | 0.0 | 162.0 | 2.5 | 1040.0 | 676.0 | 28 | 79.99 | . 1 540.0 | 0.0 | 0.0 | 162.0 | 2.5 | 1055.0 | 676.0 | 28 | 61.89 | . 2 332.5 | 142.5 | 0.0 | 228.0 | 0.0 | 932.0 | 594.0 | 270 | 40.27 | . 3 332.5 | 142.5 | 0.0 | 228.0 | 0.0 | 932.0 | 594.0 | 365 | 41.05 | . 4 198.6 | 132.4 | 0.0 | 192.0 | 0.0 | 978.4 | 825.5 | 360 | 44.30 | . Apresentando um resumo estatístico dos dataframe por coluna, tais como: quantidade de dados, média, desvio padrão, mínimo, primeiro ao terceiro quartil e valor máximo. . df.describe() . cement slag flyash water superplasticizer coarseaggregate fineaggregate age csMPa . count 1030.000000 | 1030.000000 | 1030.000000 | 1030.000000 | 1030.000000 | 1030.000000 | 1030.000000 | 1030.000000 | 1030.000000 | . mean 281.167864 | 73.895825 | 54.188350 | 181.567282 | 6.204660 | 972.918932 | 773.580485 | 45.662136 | 35.817961 | . std 104.506364 | 86.279342 | 63.997004 | 21.354219 | 5.973841 | 77.753954 | 80.175980 | 63.169912 | 16.705742 | . min 102.000000 | 0.000000 | 0.000000 | 121.800000 | 0.000000 | 801.000000 | 594.000000 | 1.000000 | 2.330000 | . 25% 192.375000 | 0.000000 | 0.000000 | 164.900000 | 0.000000 | 932.000000 | 730.950000 | 7.000000 | 23.710000 | . 50% 272.900000 | 22.000000 | 0.000000 | 185.000000 | 6.400000 | 968.000000 | 779.500000 | 28.000000 | 34.445000 | . 75% 350.000000 | 142.950000 | 118.300000 | 192.000000 | 10.200000 | 1029.400000 | 824.000000 | 56.000000 | 46.135000 | . max 540.000000 | 359.400000 | 200.100000 | 247.000000 | 32.200000 | 1145.000000 | 992.600000 | 365.000000 | 82.600000 | . Plotando os gr&#225;ficos de todas as v&#225;riaveis . Para visualização da relação entre as váriaveis é interessante fazer a visualização gráfica da relação entre as variáveis. Para isso usamos a função PairGrid da biblioteca Seaborn aliado com um scatterplot da biblioteca MatplotLib. . sns.set(style=&quot;darkgrid&quot;) g = sns.PairGrid(df) g.map(plt.scatter) . &lt;seaborn.axisgrid.PairGrid at 0x185717d77f0&gt; . Correla&#231;&#227;o linear . Para entendimento da correlação linear das variáveis entre si, temos a função &quot;built-in&quot; do Pandas que nos retorna o coeficiente de correlação que tem por padrão o método Pearson. . df.corr() . cement slag flyash water superplasticizer coarseaggregate fineaggregate age csMPa . cement 1.000000 | -0.275216 | -0.397467 | -0.081587 | 0.092386 | -0.109349 | -0.222718 | 0.081946 | 0.497832 | . slag -0.275216 | 1.000000 | -0.323580 | 0.107252 | 0.043270 | -0.283999 | -0.281603 | -0.044246 | 0.134829 | . flyash -0.397467 | -0.323580 | 1.000000 | -0.256984 | 0.377503 | -0.009961 | 0.079108 | -0.154371 | -0.105755 | . water -0.081587 | 0.107252 | -0.256984 | 1.000000 | -0.657533 | -0.182294 | -0.450661 | 0.277618 | -0.289633 | . superplasticizer 0.092386 | 0.043270 | 0.377503 | -0.657533 | 1.000000 | -0.265999 | 0.222691 | -0.192700 | 0.366079 | . coarseaggregate -0.109349 | -0.283999 | -0.009961 | -0.182294 | -0.265999 | 1.000000 | -0.178481 | -0.003016 | -0.164935 | . fineaggregate -0.222718 | -0.281603 | 0.079108 | -0.450661 | 0.222691 | -0.178481 | 1.000000 | -0.156095 | -0.167241 | . age 0.081946 | -0.044246 | -0.154371 | 0.277618 | -0.192700 | -0.003016 | -0.156095 | 1.000000 | 0.328873 | . csMPa 0.497832 | 0.134829 | -0.105755 | -0.289633 | 0.366079 | -0.164935 | -0.167241 | 0.328873 | 1.000000 | . Escolhendo as variáveis que serão utilizadas para criação do modelo. . var_used = [&#39;cement&#39;, &#39;superplasticizer&#39;, &#39;age&#39;, &#39;water&#39;] train = df[var_used] target = df[&#39;csMPa&#39;] . Tabela com somente as variáveis que serão utilizadas. . train.head() . cement superplasticizer age water . 0 540.0 | 2.5 | 28 | 162.0 | . 1 540.0 | 2.5 | 28 | 162.0 | . 2 332.5 | 0.0 | 270 | 228.0 | . 3 332.5 | 0.0 | 365 | 228.0 | . 4 198.6 | 0.0 | 360 | 192.0 | . Para iniciarmos um modelo temos que fazer a transformação da base de dados que está com o tipo de DataFrame para tensor, que é utilizado pelo Pytorch. Todavia, uma das maneiras de fazer essa transformação é antes fazer a transformação da base de dados para um vetor do Numpy e depois transformar para um tensor do Pytorch. . Obs.: Foi criado o vetor de uns para ser adicionado ao tensor dos parâmetros, pois essa coluna deverá multiplicar a constante da expressão (b), conforme o exemplo abaixo. . Y = a*X + b . train = np.asarray(train) a = np.ones((train.shape[0],1)) train = torch.tensor(np.concatenate((train, a), axis=1)) target = torch.tensor(np.asarray(target)) train.shape . torch.Size([1030, 5]) . Criando o modelo . Para iniciarmos precisamos criar uma função a qual definirá a equação da regressão linear a qual utilizará a função matmul para realizar a multiplicação entre os dois tensores dos parâmetros e variáveis dependentes. . def model(x,params): return torch.matmul(x, params) . Função que calcula o erro quadrático médio (MSE). . Para saber mais sobre como é calculado acesso o link: https://pt.qwe.wiki/wiki/Mean_squared_error . def mse(pred, labels): return ((pred - labels)**2).mean() . Para iniciar o treino do modelo primeiramente temos que criar um tensor o qual receberá os valores dos parâmetros que serão atualizados a cada iteração, quedo assim precisamos utilizar o método requiresgrad assim será possível calcular o gradiente desse tensor quando necessário. . Observe que o tipo do objeto criado é torch.float64. . params = torch.randn(5,1, dtype=torch.float64).requires_grad_() params.dtype . torch.float64 . Primeiro passo: realizar as predições do modelo . pred = model(train, params) . Segundo passo: calcular como o nosso modelo performou, ou seja, calcular MSE para averiguação da performace do modelo. . Observe que o modelo vai apresentar um erro acentuado, pois os parâmetros ainda não foram treinados. . loss = mse(pred, target) loss . tensor(4826.8560, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;) . Terceiro passo: realizar o gradiente descente. . Conceito do algoritmo de gradiente descendente: http://cursos.leg.ufpr.br/ML4all/apoio/Gradiente.html . loss.backward() params.grad . tensor([[ 4674.1422], [ 169.6877], [-7388.6451], [ 3269.3217], [ 19.6690]], dtype=torch.float64) . Quarto passo: Atualização dos parâmetros, para isso utiliza-se o valor do gradiente por meio do algoritmo descendente e é escalado (multiplicado) pelo taxa de aprendizado (learning rate). . Após a realização da atulização dos parâmetros deve-se resetar o gradiente. . lr = 1e-5 params.data -= lr * params.grad.data params.grad = None . Primeira iteração realizada, pode-se observar o valor do erro do nosso modelo reduziu. A tendência é ocorrer uma diminuição até a cada iteração, até a estabilização do modelo. . pred = model(train, params) loss = mse(pred, target) loss . tensor(4242.2577, dtype=torch.float64, grad_fn=&lt;MeanBackward0&gt;) . Foi criada uma função que realiza todos os passos acima realizados. . def step(train, target, params, lr = 1e-6): ## realizando as predições pred = model(train, params) ## caculando o erro loss = mse(pred, target) ## realizando o gradiente descendente loss.backward() ## atualizando os parâmtros params.data -= lr * params.grad.data ## reset do gradiente params.grad = None ## imprimindo na tela o erro print(&#39;Loss:&#39;,loss.item()) ## retornado as predições e os parâmetros atuzalizados na ultima iteração return pred, params . Criando um loop para realizar as itereções, é possível verificar a diminuição do erro a cada iteração, ou seja, se realizada mais iteração pode-se chegar a um resultado plausível (neste caso não cheramos a um, pois o modelo de regressão linear não é um modelo adequado para esses dados, somente como hipótese inicial). . for i in range(10): loss, params = step(train, target, params) . Loss: 4242.257680475658 Loss: 4147.213642508007 Loss: 4069.8103849910617 Loss: 4002.831926761954 Loss: 3942.1511473935216 Loss: 3885.405335131498 Loss: 3831.2396737957183 Loss: 3778.8751298582406 Loss: 3727.8616331660246 Loss: 3677.9370952686463 . Esté é o resultado dos parâmetros que serão utilizados para o modelo realizar futuras predições. . parameters = params parameters #parametros do modelo . tensor([[-0.0047], [-0.4354], [-0.9488], [ 0.4712], [ 0.3103]], dtype=torch.float64, requires_grad=True) .",
            "url": "https://lucastiagooliveira.github.io/datascience/pytorch/regressaolinear/2020/08/31/pytorch_regression.html",
            "relUrl": "/pytorch/regressaolinear/2020/08/31/pytorch_regression.html",
            "date": " • Aug 31, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Como utilizar um Jupiter Notebook no modo escuro?",
            "content": "Se você também gosta de codar utilizando Jupyter Notebooks e ainda usa o modo escuro em todas as janelas para não sentir cansaço visual depois de ficar olhando para tela o dia todo, já deve ter se peguntado como posso mudar o tema do jupyter notebook para o modo escuro? . Mas se você procurar em todas as configurações não vai encontrar nada que possa resolver esse problema nas configurações padrões. Para fazermos isso temos duas possibilidades (gosto mais da segunda opção), as quais demostrarei a seguir. . Utilizar o pacote jupyter-themes . Para instalar esse pacote basta digitar no prompt de comando para instalar esse pacote que foi criado por Kyle Dunovan: . #intalação jupyterthemes pip install jupyterthemes . Ou utilizando o anaconda para instalação: . #instalação jupyterthemes utilizando o anaconda: conda install jupyterthemes . Após a instalação para verificar os temas diponíveis basta digitar: . jt -l . Serão listados os temas que estão disponíveis para utilização (por exemplo): . onedork | grade3 | oceans16 | chesterish | monokai | solarizedl | solarizedd . Para escolher o tema a ser utilizado: . # seleção do tema jt -t &lt;nome do tema&gt; # para exemplificar jt -t chesterish . Então para voltar a utilizar o tema original, só utilizar o comando: . Obs.: Caso não funcione, tente abrir um novo jupyter notebook . #voltar o tema original jt -r . Para mais configurações e informações desse tema, acesso o repositório oficial: https://github.com/dunovank/jupyter-themes . Utilizar o JupyterLab . JupyterLab é a nova geração da interface web do Project Jupyter, este já vem instalado para quem utiliza os ultimos pacotes do anaconda (https://docs.anaconda.com/anaconda/packages/pkg-docs/). Para quem não utiliza essas versões podem fazer a instalação separada utilizando as instruções do site: https://jupyterlab.readthedocs.io/en/stable/getting_started/installation.html. . Para abrir o JupyterLab basta digitir no prompt de comando: . jupyter lab . Após executado vai ser aberto o JupyterLab no seu browser, irá abrir de forma similar a imagem abaixo: . . Então com o JupyterLab aberto basta ir em Settings -&gt; JupyterLab Theme -&gt; JupyterLab Dark. . . Boom! . O seu notebook estará em modo escuro, pronto para ser utilizado. .",
            "url": "https://lucastiagooliveira.github.io/datascience/jupyter/modoescuro/darkmode/2020/08/31/modo-escuro-jupyter-notebook.html",
            "relUrl": "/jupyter/modoescuro/darkmode/2020/08/31/modo-escuro-jupyter-notebook.html",
            "date": " • Aug 31, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". . Lucas Tiago é um cientista de dados em formação e em busca de novos desfios, com experiência em engenharia de manutenção hopitalar e qualidade da energia elétrica. . Lucas é um apaixonado por dados e principalmente nos resultados que eles podem trazer para o compreenção da realizade. Ele se considera uma pessoa que não se conforma com as explicações padrões, ou seja, sempre buscando utilizar os dados para decifrar o status-quo. Isto cresceu durante a sua formação em engenharia elétrica e mestrado na área de qualidade da energia elétrica, com esse background continua buscando conhecimento realizando diversos cursos na área de ciência de dados. . Lucas está a procura de recolocação no mercado na área de data science e áreas correlatas, pois é apaixonado por novos desafios. Caso tenha interesse em conversarmos, por gentileza entre em contato pelo email lucastiagooliveira@gmail.com. . cloudCurriculum .",
          "url": "https://lucastiagooliveira.github.io/datascience/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lucastiagooliveira.github.io/datascience/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}